Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the
    range of 1 to 25.


The keyword used to create a function in Python is 'def'.

def get_odd_numbers():
    odd_numbers = []
    for num in range(1, 26):
        if num % 2 != 0:
            odd_numbers.append(num)
    return odd_numbers

--------------------------------------------------------------------------------------------------------------------------------------


Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs
    to demonstrate their use.


The *args syntax allows a function to accept any number of positional arguments.
It collects these arguments into a tuple, which can be accessed within the function 
using the args parameter name (or any other name of your choice).

def concatenate(*args):
    result = ''
    for arg in args:
        result += arg
    return result

# Usage
print(concatenate('Hello', ' ', 'World'))            # Output: Hello World
print(concatenate('I', ' ', 'am', ' ', 'Python'))    # Output: I am Python

The **kwargs syntax allows a function to accept any number of keyword arguments as a dictionary.
It collects these keyword arguments into a dictionary, which can be accessed within the function
using the kwargs parameter name (or any other name of your choice). 

def greet(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

# Usage
greet(name='Alice', age=25, city='New York')


#output:
name: Alice
age: 25
city: New York

----------------------------------------------------------------------------------------------------------------------------------

Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method
    used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14,16, 18, 20].


In Python, an iterator is an object that implements the iterator protocol, which consists of two methods:
iter()   and   next().

The iter() method is used to initialize the iterator object. It returns the iterator object itself.
The next() method is used for iteration. It returns the next element from the iterator. 

my_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
my_iterator = iter(my_list)  # Initialize the iterator object

for _ in range(5):  # Iterate five times
    element = next(my_iterator)  # Get the next element from the iterator
    print(element)


#output:

2
4
6
8
10

-----------------------------------------------------------------------------------------------------------------------------------


Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator
    function.


Generator function is a special type of function that uses the yield keyword instead of return to return values.

The yield keyword is used to temporarily pause the function's execution and yield a value to the caller.

def square_generator(n):
    for i in range(n):
        yield i ** 2

# Usage
squares = square_generator(5)

for square in squares:
    print(square)


#output:
0
1
4
9
16

-----------------------------------------------------------------------------------------------------------------------------------

Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the
    first 20 prime numbers.

def prime_generator():
    primes = []
    num = 2

    while True:
        if all(num % prime != 0 for prime in primes):
            primes.append(num)
            yield num
        num += 1

# Usage
primes = prime_generator()

for _ in range(20):
    prime = next(primes)
    print(prime)

#output:

2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71

--------------------------------------------------------------------------------------------------------------------------------


Q6. Write a python program to print the first 10 Fibonacci numbers using a while loop.


a, b = 0, 1
count = 0
while count<10:
    print(a)
    a, b = b, a+b
    count += 1

#output:

0
1
1
2
3
5
8
13
21
34


--------------------------------------------------------------------------------------------------------------------------------

Q7. Write a List Comprehension to iterate through the given string: ‘pwskills’.
    Expected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']


string = 'pwskills'
output = list(filter(lambda char: char in 'pwskills', string))
print(output)


#output:

['p', 'w', 's', 'k', 'i', 'l', 'l', 's']

-------------------------------------------------------------------------------------------------------------------------------------


Q8. Write a python program to check whether a given number is Palindrome or not using a while loop.


is_palindrome = lambda number: str(number) == str(number)[::-1]

numbers = [12321, 12345, 1221, 98789]

for number in numbers:
    if is_palindrome(number):
        print(f"{number} is a palindrome")
    else:
        print(f"{number} is not a palindrome")

#output:

12321 is a palindrome
12345 is not a palindrome
1221 is a palindrome
98789 is a palindrome

--------------------------------------------------------------------------------------------------------------------------------

Q9. Write a code to print odd numbers from 1 to 100 using list comprehension.




odd_numbers = list(filter(lambda num: num % 2 != 0, range(1, 101)))

print(odd_numbers)


#output:

[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]













































